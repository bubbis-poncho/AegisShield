version: '3.8'

services:
  # Infrastructure Services
  postgresql:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: aegisshield
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5.12-community
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*,gds.*"
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p password 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  vault:
    image: vault:1.15
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK

  # Backend Services
  data-ingestion:
    build:
      context: ./services/data-ingestion
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@postgresql:5432/aegisshield
      KAFKA_BROKERS: kafka:9092
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      PORT: 8060
    ports:
      - "8060:8060"
    depends_on:
      postgresql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8060/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  entity-resolution:
    build:
      context: ./services/entity-resolution
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@postgresql:5432/aegisshield
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      PORT: 8061
    ports:
      - "8061:8061"
    depends_on:
      postgresql:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8061/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  alerting-engine:
    build:
      context: ./services/alerting-engine
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@postgresql:5432/aegisshield
      KAFKA_BROKERS: kafka:9092
      PORT: 8062
    ports:
      - "8062:8062"
    depends_on:
      postgresql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8062/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  graph-engine:
    build:
      context: ./services/graph-engine
      dockerfile: Dockerfile
    environment:
      NEO4J_URL: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
      PORT: 8063
    ports:
      - "8063:8063"
    depends_on:
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8063/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@postgresql:5432/aegisshield
      DATA_INGESTION_URL: data-ingestion:8060
      ENTITY_RESOLUTION_URL: entity-resolution:8061
      ALERTING_ENGINE_URL: alerting-engine:8062
      GRAPH_ENGINE_URL: graph-engine:8063
      USER_MANAGEMENT_URL: user-management:8070
      JWT_SECRET: aegisshield-jwt-secret-change-in-production
      PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      - data-ingestion
      - entity-resolution
      - alerting-engine
      - graph-engine
      - user-management
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  user-management:
    build:
      context: ./services/user-management
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@postgresql:5432/aegisshield
      JWT_SECRET: aegisshield-jwt-secret-change-in-production
      PORT: 8070
    ports:
      - "8070:8070"
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8070/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  batch-analysis:
    build:
      context: ./services/batch-analysis
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@postgresql:5432/aegisshield
      PORT: 8080
    ports:
      - "8081:8080"
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  reporting:
    build:
      context: ./services/reporting
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:password@postgresql:5432/aegisshield
      PORT: 8071
    ports:
      - "8071:8071"
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8071/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080
      NEXT_PUBLIC_WS_URL: ws://localhost:8080/ws
      NODE_ENV: development
      PORT: 3000
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:10.1.0
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: aegisshield-network