-- Create alerts table
CREATE TABLE IF NOT EXISTS alerts (
    id VARCHAR(255) PRIMARY KEY,
    rule_id VARCHAR(255),
    title TEXT NOT NULL,
    description TEXT,
    severity VARCHAR(50) NOT NULL,
    type VARCHAR(50) NOT NULL DEFAULT 'manual',
    priority VARCHAR(50) NOT NULL DEFAULT 'medium',
    status VARCHAR(50) NOT NULL DEFAULT 'active',
    source VARCHAR(100),
    event_data JSONB,
    metadata JSONB,
    
    created_by VARCHAR(255),
    updated_by VARCHAR(255),
    acknowledged_by VARCHAR(255),
    resolved_by VARCHAR(255),
    escalated_by VARCHAR(255),
    
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    acknowledged_at TIMESTAMP WITH TIME ZONE,
    resolved_at TIMESTAMP WITH TIME ZONE,
    escalated_at TIMESTAMP WITH TIME ZONE,
    
    escalation_level INTEGER DEFAULT 0,
    escalation_policy_id VARCHAR(255),
    correlation_id VARCHAR(255),
    tags TEXT[],
    
    -- Resolution details
    resolution TEXT,
    
    CONSTRAINT alerts_severity_check CHECK (severity IN ('low', 'medium', 'high', 'critical')),
    CONSTRAINT alerts_priority_check CHECK (priority IN ('low', 'medium', 'high', 'urgent')),
    CONSTRAINT alerts_status_check CHECK (status IN ('active', 'acknowledged', 'resolved', 'escalated', 'suppressed'))
);

-- Create indexes for alerts table
CREATE INDEX IF NOT EXISTS idx_alerts_rule_id ON alerts(rule_id);
CREATE INDEX IF NOT EXISTS idx_alerts_severity ON alerts(severity);
CREATE INDEX IF NOT EXISTS idx_alerts_status ON alerts(status);
CREATE INDEX IF NOT EXISTS idx_alerts_type ON alerts(type);
CREATE INDEX IF NOT EXISTS idx_alerts_source ON alerts(source);
CREATE INDEX IF NOT EXISTS idx_alerts_created_at ON alerts(created_at);
CREATE INDEX IF NOT EXISTS idx_alerts_updated_at ON alerts(updated_at);
CREATE INDEX IF NOT EXISTS idx_alerts_escalation_level ON alerts(escalation_level);
CREATE INDEX IF NOT EXISTS idx_alerts_correlation_id ON alerts(correlation_id);
CREATE INDEX IF NOT EXISTS idx_alerts_created_by ON alerts(created_by);

-- Create composite indexes for common queries
CREATE INDEX IF NOT EXISTS idx_alerts_status_severity ON alerts(status, severity);
CREATE INDEX IF NOT EXISTS idx_alerts_status_created_at ON alerts(status, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_alerts_rule_status ON alerts(rule_id, status);
CREATE INDEX IF NOT EXISTS idx_alerts_escalation_created ON alerts(escalation_level, created_at DESC);

-- Create GIN index for JSONB columns
CREATE INDEX IF NOT EXISTS idx_alerts_event_data ON alerts USING GIN (event_data);
CREATE INDEX IF NOT EXISTS idx_alerts_metadata ON alerts USING GIN (metadata);
CREATE INDEX IF NOT EXISTS idx_alerts_tags ON alerts USING GIN (tags);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger for alerts
CREATE TRIGGER update_alerts_updated_at 
    BEFORE UPDATE ON alerts 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

-- Add table comment
COMMENT ON TABLE alerts IS 'Stores alerts generated by the alerting engine';
COMMENT ON COLUMN alerts.id IS 'Unique identifier for the alert';
COMMENT ON COLUMN alerts.rule_id IS 'ID of the rule that generated this alert';
COMMENT ON COLUMN alerts.severity IS 'Severity level of the alert (low, medium, high, critical)';
COMMENT ON COLUMN alerts.status IS 'Current status of the alert (active, acknowledged, resolved, escalated, suppressed)';
COMMENT ON COLUMN alerts.event_data IS 'JSON data of the event that triggered the alert';
COMMENT ON COLUMN alerts.metadata IS 'Additional metadata about the alert';
COMMENT ON COLUMN alerts.escalation_level IS 'Current escalation level (0 = not escalated)';
COMMENT ON COLUMN alerts.correlation_id IS 'ID for correlating related alerts';
COMMENT ON COLUMN alerts.tags IS 'Array of tags for categorization and filtering';