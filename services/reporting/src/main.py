#!/usr/bin/env python3
"""
Reporting Service for Compliance
Generates compliance reports, audit trails, and regulatory submissions.
"""

import asyncio
import logging
import signal
import sys
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
from pathlib import Path
import json
import io

import uvicorn
from fastapi import FastAPI, Depends, HTTPException, status, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
from fastapi.responses import StreamingResponse
from pydantic import BaseModel, Field
import pandas as pd
import numpy as np
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from jinja2 import Environment, FileSystemLoader
import os
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
import xlsxwriter
from io import BytesIO

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Security
security = HTTPBearer()

class ReportRequest(BaseModel):
    """Request model for report generation"""
    report_type: str = Field(..., regex="^(suspicious_activity|compliance_summary|audit_trail|regulatory_filing|investigation_summary)$")
    start_date: datetime
    end_date: datetime
    format: str = Field(default="pdf", regex="^(pdf|excel|json|csv)$")
    filters: Optional[Dict[str, Any]] = None
    include_details: bool = True
    classification: str = Field(default="internal", regex="^(public|internal|confidential|restricted)$")

class ReportMetadata(BaseModel):
    """Report metadata model"""
    report_id: str
    report_type: str
    generated_at: datetime
    generated_by: str
    start_date: datetime
    end_date: datetime
    total_records: int
    classification: str
    file_size: Optional[int] = None
    checksum: Optional[str] = None

class SuspiciousActivityReport(BaseModel):
    """SAR (Suspicious Activity Report) model"""
    transaction_id: str
    entity_name: str
    entity_id: str
    suspicious_activity_type: str
    transaction_amount: float
    transaction_date: datetime
    description: str
    risk_score: float
    investigation_status: str
    compliance_officer: str

class ComplianceMetrics(BaseModel):
    """Compliance metrics model"""
    total_transactions: int
    flagged_transactions: int
    compliance_rate: float
    average_risk_score: float
    alerts_generated: int
    investigations_opened: int
    cases_closed: int
    regulatory_reports_filed: int

class ReportingService:
    """Main service for compliance reporting operations"""
    
    def __init__(self):
        self.db_url = os.getenv("DATABASE_URL", "postgresql://postgres:password@localhost:5432/aegisshield")
        self.engine = create_engine(self.db_url)
        self.Session = sessionmaker(bind=self.engine)
        
        # Setup Jinja2 templates
        template_dir = Path(__file__).parent / "templates"
        template_dir.mkdir(exist_ok=True)
        self.jinja_env = Environment(loader=FileSystemLoader(str(template_dir)))
        
        # Create default templates if they don't exist
        self._create_default_templates()
        
    def _create_default_templates(self):
        """Create default report templates"""
        template_dir = Path(__file__).parent / "templates"
        
        # SAR template
        sar_template = """
# Suspicious Activity Report
Generated: {{ generated_at }}
Period: {{ start_date }} to {{ end_date }}
Classification: {{ classification }}

## Summary
- Total Transactions Reviewed: {{ total_transactions }}
- Suspicious Activities Identified: {{ suspicious_count }}
- Average Risk Score: {{ average_risk_score }}

## Suspicious Activities
{% for activity in suspicious_activities %}
### Activity {{ loop.index }}
- **Entity**: {{ activity.entity_name }} (ID: {{ activity.entity_id }})
- **Transaction**: {{ activity.transaction_id }}
- **Amount**: ${{ "{:,.2f}".format(activity.transaction_amount) }}
- **Date**: {{ activity.transaction_date }}
- **Type**: {{ activity.suspicious_activity_type }}
- **Risk Score**: {{ activity.risk_score }}
- **Description**: {{ activity.description }}
- **Status**: {{ activity.investigation_status }}

{% endfor %}

## Compliance Actions Taken
{% for action in compliance_actions %}
- {{ action.date }}: {{ action.action }} - {{ action.description }}
{% endfor %}

---
Report ID: {{ report_id }}
Generated by AegisShield Compliance System
        """
        
        sar_file = template_dir / "sar_template.md"
        if not sar_file.exists():
            sar_file.write_text(sar_template.strip())
    
    async def generate_suspicious_activity_report(self, request: ReportRequest) -> Dict[str, Any]:
        """Generate Suspicious Activity Report (SAR)"""
        logger.info(f"Generating SAR for {request.start_date} to {request.end_date}")
        
        try:
            with self.Session() as session:
                # Query suspicious transactions
                query = text("""
                    SELECT 
                        t.id as transaction_id,
                        e.name as entity_name,
                        e.id as entity_id,
                        t.amount as transaction_amount,
                        t.timestamp as transaction_date,
                        a.alert_type as suspicious_activity_type,
                        a.risk_score,
                        a.description,
                        COALESCE(i.status, 'pending') as investigation_status,
                        COALESCE(u.username, 'system') as compliance_officer
                    FROM transactions t
                    JOIN entities e ON t.sender_id = e.id
                    LEFT JOIN alerts a ON a.transaction_id = t.id
                    LEFT JOIN investigations i ON i.alert_id = a.id
                    LEFT JOIN users u ON i.assigned_to = u.id
                    WHERE t.timestamp BETWEEN :start_date AND :end_date
                    AND a.risk_score >= 0.7
                    ORDER BY a.risk_score DESC, t.timestamp DESC
                """)
                
                result = session.execute(query, {
                    "start_date": request.start_date,
                    "end_date": request.end_date
                })
                
                suspicious_activities = []
                for row in result.fetchall():
                    suspicious_activities.append(SuspiciousActivityReport(
                        transaction_id=str(row.transaction_id),
                        entity_name=row.entity_name,
                        entity_id=str(row.entity_id),
                        suspicious_activity_type=row.suspicious_activity_type,
                        transaction_amount=float(row.transaction_amount),
                        transaction_date=row.transaction_date,
                        description=row.description or "Automated risk assessment flagged as suspicious",
                        risk_score=float(row.risk_score),
                        investigation_status=row.investigation_status,
                        compliance_officer=row.compliance_officer
                    ))
                
                # Calculate summary metrics
                total_transactions_query = text("""
                    SELECT COUNT(*) as total
                    FROM transactions t
                    WHERE t.timestamp BETWEEN :start_date AND :end_date
                """)
                
                total_result = session.execute(total_transactions_query, {
                    "start_date": request.start_date,
                    "end_date": request.end_date
                }).fetchone()
                
                total_transactions = total_result.total if total_result else 0
                suspicious_count = len(suspicious_activities)
                average_risk_score = np.mean([sa.risk_score for sa in suspicious_activities]) if suspicious_activities else 0.0
                
                # Generate report content
                report_data = {
                    "report_id": f"SAR_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}",
                    "generated_at": datetime.utcnow(),
                    "start_date": request.start_date,
                    "end_date": request.end_date,
                    "classification": request.classification,
                    "total_transactions": total_transactions,
                    "suspicious_count": suspicious_count,
                    "average_risk_score": round(average_risk_score, 3),
                    "suspicious_activities": suspicious_activities,
                    "compliance_actions": [
                        {
                            "date": datetime.utcnow().date(),
                            "action": "Automated Risk Assessment",
                            "description": f"System identified {suspicious_count} suspicious activities"
                        }
                    ]
                }
                
                return report_data
                
        except Exception as e:
            logger.error(f"Error generating SAR: {str(e)}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Report generation failed: {str(e)}"
            )
    
    async def generate_compliance_summary(self, request: ReportRequest) -> Dict[str, Any]:
        """Generate compliance summary report"""
        logger.info(f"Generating compliance summary for {request.start_date} to {request.end_date}")
        
        try:
            with self.Session() as session:
                # Query compliance metrics
                metrics_query = text("""
                    SELECT 
                        COUNT(DISTINCT t.id) as total_transactions,
                        COUNT(DISTINCT CASE WHEN a.id IS NOT NULL THEN t.id END) as flagged_transactions,
                        COUNT(DISTINCT a.id) as alerts_generated,
                        COUNT(DISTINCT i.id) as investigations_opened,
                        COUNT(DISTINCT CASE WHEN i.status = 'closed' THEN i.id END) as cases_closed,
                        AVG(CASE WHEN a.risk_score IS NOT NULL THEN a.risk_score END) as average_risk_score
                    FROM transactions t
                    LEFT JOIN alerts a ON a.transaction_id = t.id
                    LEFT JOIN investigations i ON i.alert_id = a.id
                    WHERE t.timestamp BETWEEN :start_date AND :end_date
                """)
                
                result = session.execute(metrics_query, {
                    "start_date": request.start_date,
                    "end_date": request.end_date
                }).fetchone()
                
                metrics = ComplianceMetrics(
                    total_transactions=result.total_transactions or 0,
                    flagged_transactions=result.flagged_transactions or 0,
                    compliance_rate=round((1 - (result.flagged_transactions or 0) / max(result.total_transactions or 1, 1)) * 100, 2),
                    average_risk_score=round(result.average_risk_score or 0.0, 3),
                    alerts_generated=result.alerts_generated or 0,
                    investigations_opened=result.investigations_opened or 0,
                    cases_closed=result.cases_closed or 0,
                    regulatory_reports_filed=0  # Would be tracked separately
                )
                
                report_data = {
                    "report_id": f"COMP_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}",
                    "generated_at": datetime.utcnow(),
                    "start_date": request.start_date,
                    "end_date": request.end_date,
                    "classification": request.classification,
                    "metrics": metrics,
                    "compliance_status": "COMPLIANT" if metrics.compliance_rate >= 95.0 else "ATTENTION_REQUIRED"
                }
                
                return report_data
                
        except Exception as e:
            logger.error(f"Error generating compliance summary: {str(e)}")
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail=f"Report generation failed: {str(e)}"
            )
    
    def generate_pdf_report(self, report_data: Dict[str, Any], report_type: str) -> BytesIO:
        """Generate PDF report from report data"""
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []
        
        # Title
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            alignment=1  # Center
        )
        
        story.append(Paragraph(f"{report_type.upper().replace('_', ' ')} REPORT", title_style))
        story.append(Spacer(1, 12))
        
        # Metadata
        story.append(Paragraph(f"<b>Report ID:</b> {report_data['report_id']}", styles['Normal']))
        story.append(Paragraph(f"<b>Generated:</b> {report_data['generated_at']}", styles['Normal']))
        story.append(Paragraph(f"<b>Period:</b> {report_data['start_date']} to {report_data['end_date']}", styles['Normal']))
        story.append(Paragraph(f"<b>Classification:</b> {report_data['classification'].upper()}", styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Content based on report type
        if report_type == "suspicious_activity":
            # Summary table
            summary_data = [
                ['Metric', 'Value'],
                ['Total Transactions', str(report_data['total_transactions'])],
                ['Suspicious Activities', str(report_data['suspicious_count'])],
                ['Average Risk Score', str(report_data['average_risk_score'])]
            ]
            
            summary_table = Table(summary_data)
            summary_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 14),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(summary_table)
            story.append(Spacer(1, 20))
            
            # Suspicious activities
            if 'suspicious_activities' in report_data:
                story.append(Paragraph("SUSPICIOUS ACTIVITIES", styles['Heading2']))
                story.append(Spacer(1, 12))
                
                for i, activity in enumerate(report_data['suspicious_activities'][:10]):  # Limit to 10 for PDF
                    story.append(Paragraph(f"<b>Activity {i+1}</b>", styles['Heading3']))
                    story.append(Paragraph(f"Entity: {activity.entity_name}", styles['Normal']))
                    story.append(Paragraph(f"Amount: ${activity.transaction_amount:,.2f}", styles['Normal']))
                    story.append(Paragraph(f"Risk Score: {activity.risk_score}", styles['Normal']))
                    story.append(Spacer(1, 10))
        
        doc.build(story)
        buffer.seek(0)
        return buffer
    
    def generate_excel_report(self, report_data: Dict[str, Any], report_type: str) -> BytesIO:
        """Generate Excel report from report data"""
        buffer = BytesIO()
        
        with xlsxwriter.Workbook(buffer, {'in_memory': True}) as workbook:
            # Create formats
            header_format = workbook.add_format({
                'bold': True,
                'font_color': 'white',
                'bg_color': '#4472C4',
                'border': 1
            })
            
            cell_format = workbook.add_format({'border': 1})
            
            # Summary worksheet
            summary_ws = workbook.add_worksheet('Summary')
            summary_ws.write('A1', 'Report Metadata', header_format)
            summary_ws.write('A2', 'Report ID', cell_format)
            summary_ws.write('B2', report_data['report_id'], cell_format)
            summary_ws.write('A3', 'Generated', cell_format)
            summary_ws.write('B3', str(report_data['generated_at']), cell_format)
            summary_ws.write('A4', 'Start Date', cell_format)
            summary_ws.write('B4', str(report_data['start_date']), cell_format)
            summary_ws.write('A5', 'End Date', cell_format)
            summary_ws.write('B5', str(report_data['end_date']), cell_format)
            
            # Data worksheet
            if report_type == "suspicious_activity" and 'suspicious_activities' in report_data:
                data_ws = workbook.add_worksheet('Suspicious Activities')
                headers = ['Transaction ID', 'Entity Name', 'Amount', 'Date', 'Type', 'Risk Score', 'Status']
                
                for col, header in enumerate(headers):
                    data_ws.write(0, col, header, header_format)
                
                for row, activity in enumerate(report_data['suspicious_activities'], 1):
                    data_ws.write(row, 0, activity.transaction_id, cell_format)
                    data_ws.write(row, 1, activity.entity_name, cell_format)
                    data_ws.write(row, 2, activity.transaction_amount, cell_format)
                    data_ws.write(row, 3, str(activity.transaction_date), cell_format)
                    data_ws.write(row, 4, activity.suspicious_activity_type, cell_format)
                    data_ws.write(row, 5, activity.risk_score, cell_format)
                    data_ws.write(row, 6, activity.investigation_status, cell_format)
        
        buffer.seek(0)
        return buffer

# FastAPI application
app = FastAPI(
    title="AegisShield Reporting Service",
    description="Compliance reporting and regulatory submission service",
    version="1.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Service instance
reporting_service = ReportingService()

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "service": "reporting", "timestamp": datetime.utcnow()}

@app.post("/reports/generate")
async def generate_report(
    request: ReportRequest,
    token: str = Depends(security)
):
    """Generate compliance report"""
    
    try:
        # Generate report data based on type
        if request.report_type == "suspicious_activity":
            report_data = await reporting_service.generate_suspicious_activity_report(request)
        elif request.report_type == "compliance_summary":
            report_data = await reporting_service.generate_compliance_summary(request)
        else:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"Unsupported report type: {request.report_type}"
            )
        
        # Return based on requested format
        if request.format == "json":
            return report_data
        elif request.format == "pdf":
            pdf_buffer = reporting_service.generate_pdf_report(report_data, request.report_type)
            return StreamingResponse(
                io.BytesIO(pdf_buffer.read()),
                media_type="application/pdf",
                headers={"Content-Disposition": f"attachment; filename={report_data['report_id']}.pdf"}
            )
        elif request.format == "excel":
            excel_buffer = reporting_service.generate_excel_report(report_data, request.report_type)
            return StreamingResponse(
                io.BytesIO(excel_buffer.read()),
                media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                headers={"Content-Disposition": f"attachment; filename={report_data['report_id']}.xlsx"}
            )
        else:
            return report_data
            
    except Exception as e:
        logger.error(f"Report generation failed: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Report generation failed: {str(e)}"
        )

@app.get("/reports/types")
async def get_report_types():
    """Get available report types"""
    return {
        "report_types": [
            {
                "id": "suspicious_activity",
                "name": "Suspicious Activity Report (SAR)",
                "description": "Report of transactions flagged as suspicious",
                "formats": ["pdf", "excel", "json"]
            },
            {
                "id": "compliance_summary",
                "name": "Compliance Summary",
                "description": "Overall compliance metrics and status",
                "formats": ["pdf", "excel", "json"]
            },
            {
                "id": "audit_trail",
                "name": "Audit Trail",
                "description": "Detailed audit log of system activities",
                "formats": ["excel", "json"]
            },
            {
                "id": "regulatory_filing",
                "name": "Regulatory Filing",
                "description": "Formatted reports for regulatory submission",
                "formats": ["pdf", "json"]
            }
        ]
    }

async def shutdown_handler():
    """Graceful shutdown handler"""
    logger.info("Shutting down reporting service...")

if __name__ == "__main__":
    # Setup signal handlers
    signal.signal(signal.SIGTERM, lambda s, f: asyncio.create_task(shutdown_handler()))
    signal.signal(signal.SIGINT, lambda s, f: asyncio.create_task(shutdown_handler()))
    
    # Run the service
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", "8071")),
        log_level="info",
        access_log=True
    )